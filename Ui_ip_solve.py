# Form implementation generated from reading ui file 'd:\ganweilun\ganweilun\Code\qq_ip_solve\ip_solve.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt6 import QtCore
from PyQt6.QtWidgets import QWidget,QLabel, QMessageBox,QPushButton, QApplication,QFileDialog,QLineEdit
import pandas as pd
import shutil
import os
import time
from datetime import datetime


class Ui_Dialog(QWidget):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setObjectName("Dialog")
        self.resize(525, 134)
        self.label = QLabel(self)
        self.label.setEnabled(True)
        self.label.setGeometry(QtCore.QRect(20, 40, 81, 16))
        self.label.setObjectName("label")
        self.lineEdit = QLineEdit(self)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(100, 40, 291, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QPushButton(self)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(410, 40, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QPushButton(self)
        self.pushButton_2.setGeometry(QtCore.QRect(210, 100, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        # 绑定事件
        self.pushButton.clicked.connect(self.showDialog)
        self.pushButton_2.clicked.connect(self.run)
        self.retranslateUi()
        self.show()
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "登录日志清洗工具"))
        self.label.setText(_translate("Dialog", "选择文件夹"))
        self.pushButton.setText(_translate("Dialog", "浏览"))
        self.pushButton_2.setText(_translate("Dialog", "运行"))

    def showDialog(self):
        fname = QFileDialog.getExistingDirectory(self, '打开文件夹')
        self.fname = fname
        if fname:
            self.lineEdit.setText(fname)

    def show_success_message(self):
        reply = QMessageBox.about(self, "成功", "运行成功！！")

    def show_error_message(self):
        QMessageBox.critical(self,"失败","请重启工具！！",QMessageBox.StandardButton.Yes,QMessageBox.StandardButton.Yes)

    def run(self):
        try:
            solveFileDir(self.fname)
            self.show_success_message()
        except:
            self.show_error_message()
            
# 计算两个日期时间字符串间隔
def calDateStrInterval(str1, str2):
    # 先格式化为timestamp
    timestamp1 = datetime.strptime(str1, '%Y-%m-%d %H:%M:%S').timestamp()
    timestamp2 = datetime.strptime(str2, '%Y-%m-%d %H:%M:%S').timestamp()
    return abs(timestamp1-timestamp2)

# 对单个文件进行清洗并生成excel
def cleanSingleFile(pathTmp,fileName):
    path = r'%s/%s.xls' % (pathTmp,fileName)
    dataFrame = pd.read_excel(path)
# 构造一个dict来放简化的数据，省的dataframe遍历太复杂了
    dict = {}
    # 批量处理给dict赋值
    for row_index, row in dataFrame.iterrows():
        dict[row_index] = {'ip': row['登录IP'], 'time': row['截获时间']}
    # 记一个对象，值为第一个
    firstObj = ''
    # 存储需要被删除的列
    deleteCol = {}
    # 存储结果数据
    resultFrame = []
    # 接下来处理dict即可
    for index, content in dict.items():
        if index == 0:
            firstObj = {'time': dict[0]['time'], 'ip': dict[0]['ip']}
        elif firstObj['ip'] == content['ip'] and calDateStrInterval(firstObj['time'], content['time']) < 3600:
            deleteCol[index] = {'time': content['time'],
                                'ip': content['ip']}
        else:
            firstObj = {'time': content['time'], 'ip': content['ip']}

    # 进行删除操作
    for colIndex, colContent in deleteCol.items():
        dataFrame.drop([colIndex], inplace=True)

    dataFrame.to_excel('%s/登录日志清洗后/%s【清洗后】.xlsx'  % (pathTmp,fileName), index=False)

# 处理的总函数
def solveFileDir(pathTmp):
    start_time = time.time()
    print('运行中，请稍等.........')
    # 如果存在就删掉否则新建，不然每次需要删掉文件夹才能运行
    if os.path.exists('%s/登录日志清洗后' % pathTmp):
        shutil.rmtree('%s/登录日志清洗后' % pathTmp)
    os.makedirs('%s/登录日志清洗后' % pathTmp)
    files = [f for f in os.listdir(pathTmp) if os.path.isfile('%s/%s' % (pathTmp,f))]
    for file in files:
        fileName = file.split('.')[0]
        if fileName.find('登录日志同步') >= 0:
            cleanSingleFile(pathTmp,fileName)
    print('程序运行耗时：%s' % (time.time() - start_time))


# main函数 负责起UI和事件循环
def main():
    app = QApplication(sys.argv)
    ex = Ui_Dialog()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()